<?php

/*
 * This file is part of EC-CUBE
 *
 * Copyright(c) Mehedi Hasan. All Rights Reserved.
 *
 * http://www.mehedi.com/
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Customize\Repository;

use Eccube\Common\Constant;
use Eccube\Repository\AbstractRepository;
use Customize\Entity\MyForm;
use Doctrine\Persistence\ManagerRegistry;

/**
 * MyFormRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MyFormRepository extends AbstractRepository
{
    /**
     * MyFormRepository constructor.
     *
     * @param ManagerRegistry $registry
     */
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, MyForm::class);
    }

    /**
     * @param Query $query
     * @return array
     */
    public function all($query = null)
    {
        $qb = $this->createQueryBuilder('mf');
        if ($query !== null) {
            $qb->andWhere(
                $qb->expr()->orX(
                    $qb->expr()->like('mf.email', ':query'),
                    $qb->expr()->like('mf.name', ':query')
                )
            )->setParameter('query', '%' . $query . '%');
        }
        return $qb->getQuery()->getResult();
    }

    /**
     * @param Id $id
     * @param Email $email
     * @param Name $name
     * @return bool
     */
    public function updateById($id, $email, $name)
    {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        $qb->update('Customize\Entity\MyForm', 'mf')
            ->set('mf.email', ':email')
            ->set('mf.name', ':name')
            ->where('mf.id = :id')
            ->setParameter('email', $email)
            ->setParameter('name', $name)
            ->setParameter('id', $id)
            ->getQuery()
            ->execute();
        
        return true;
    }

    /**
     * @param Id $id
     * @return bool
     */
    public function destroyById($id)
    {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        $qb->delete('Customize\Entity\MyForm', 'mf')
           ->where('mf.id = :id')
           ->setParameter('id', $id)
           ->getQuery()
           ->execute();
    
        return true;
    }

}